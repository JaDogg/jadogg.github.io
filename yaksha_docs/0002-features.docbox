# Language Features
---
## Data Types
---
### Strings
!!!<p><span class="yellow-status">in progress</span></p>
---
*String allocations and de-allocations are abstracted away, so strings are immutable and automatically freed.
*Strings are also duplicated everytime you create a new variable or pass it to a function.
*This makes the design philosophy of strings different from that of languages like `zig` for example, where you have full control over allocations.
*It is not meant to be fast. It is meant to be productively usable.
*At C code level `yk__sds` data structure will be used. (`yk__sds` is a `char*` with special header placed just before).
;Data Type - `str`
;Internally this is a binary string. 
;`sds` library (part of runtime lib) takes care of the heavy lifting.
---
### String View
!!!<p><span class="red-status">not started</span></p>
---
*Idea of string view is to avoid duplicating strings.
*Read only.
;Data Type - `string_view`
---

## Syntax features
---
### Let statement
!!!<p><span class="yellow-status">in progress</span></p>
---
*Create a new variable.
*If you want to assign to a variable, it needs to be created.
*If no value is provided default value for data type is used.
;Default value for `str` is an empty string.
---
```yaksha
def main() -> int:
    a: int = 10
    print(a)
    return 0
```
---
### Print statement
---
!!!<p><span class="yellow-status">in progress</span></p>
---
*This is a statement and not an expression (function call).
;This may change to a builtin function in the future.
*Does not support more than one parameter.
*Does not suffix a new line character at the end.
*Only builtin data types can be printed.
---
### Defer statement
---
!!!<p><span class="green-status">done</span></p>
---
*Defer something to happen at the end of the scope.
*Before any `return` from a function.
*Before `break`, `continue` or end of `while` loop.
*Before `if` or `else` body.
;`defer` works as a stack.
;That means deferred expressions are executed in last deferred first executed order. 
---
```yaksha
def on_exit() -> int:
    println("All done")
    return 0

def main() -> int:
    defer(on_exit())
    println("Hello World")
    return 0
```
---
Output:
```text
Hello World
All done
```
---
### Del statement
---
!!!<p><span class="red-status">not started</span></p>
---
*Delete values.
*Delete arrays, etc without deleting content.
---
### Struct statement
---
!!!<p><span class="red-status">not started</span></p>
---
*Create a data structure.
---
```yaksha
class student:
    student_id: int
    name: str
    address: str

struct teacher:
    teacher_id: int
    name: str
    address: str
    
def main() -> int:
    print("Size of student structure is ")
    println(sizeof(student))
    return 0    
```
;`struct` and `class` keywords do the same thing.
---
## Builtin Functions
---
!!!<p><span class="red-status">not started</span></p>
---
*`print` - A `print` function will be introduced instead of `print` statement.
*`println` - A `print` function that suffix a new line character.
*`len` - Get length of strings and other data structures provided by the language.
*`sizeof` - Size of structures or C data types.
*`enumerate_utf8` - Enumerate utf8 code points of a string.
---