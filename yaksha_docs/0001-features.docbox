# Language Features
---
## Data Types
---
### Strings
!!!<p><span class="yellow-status">in progress</span></p>
---
*String allocations and de-allocations are abstracted away, so strings are immutable and automatically freed.
*Strings are also duplicated everytime you create a new variable or pass it to a function.
*This makes the design philosophy of strings different from that of languages like `zig` for example, where you have more control over allocations.
*It is not meant to be fast. It is meant to be productively usable.
*At C code level `yk__sds` data structure will be used. (`yk__sds` is a `char*` with special header placed just before).
;Data Type - `str`
;Internally this is a binary string. 
;`sds` library (part of runtime lib) takes care of the heavy lifting.
---
### String View
!!!<p><span class="red-status">not started</span></p>
---
*Idea of string view is to avoid duplicating strings.
*Read only.
*Let there be dragons, if referred string goes out of scope this will point to invalid memory. 
*If you assign a new value to the string, then string view is invalid as original string is freed. In this case `strvw` will refer to invalid memory.
;Data Type - `strvw`
---
### Standard integers 
---
!!!<p><span class="green-status">done</span></p>
---
*Default integer is a 32bit signed integer. 
*This is compiled to `int32_t` on all platforms.
;Data Type - `int` or `i32`
---
### Integer types
---
!!!<p><span class="red-status">not started</span></p>
---
*Signed types - `i8`, `i16`, `i32`, `i64`
*Unsigned types - `u8`, `u16`, `u32`, `u64`
---
### Float types
---
!!!<p><span class="red-status">not started</span></p>
---
*`f32` or `float` - single precision floats.
;Data Type - `f32`, `float` and `f64`
*`f64` - double precision floats.
---
## Syntax features
---
### Let statement
!!!<p><span class="yellow-status">in progress</span></p>
---
*Create a new variable.
*If you want to assign to a variable, it needs to be created.
*If no value is provided default value for data type is used.
;Default value for `str` is an empty string.
---
```yaksha
def main() -> int:
    a: int = 10
    print(a)
    return 0
```
---
### Print statement
---
!!!<p><span class="yellow-status">in progress</span></p>
---
*This is a statement and not an expression (function call).
;This may change to a builtin function in the future.
*Does not support more than one parameter.
*Does not suffix a new line character at the end.
*Only builtin data types can be printed.
---
### Functions
---
#### Basic functions
---
!!!<p><span class="yellow-status">in progress</span></p>
---
*Has a return type if return type is `None` it will be converted to `void`.
---
```yaksha
def main() -> int:
    print("Hello World\n")
    return 0
```
---
#### Exposing C library functions
---
!!!<p><span class="red-status">not started</span></p>
---
*Useful to expose C library code.
```yaksha
@native("getarg")
def getarg(n: int) -> str:
    pass
```
;Compiles to:
;`#define yy__getarg getarg`
;This is because all Yaksha lang identifiers are prefixed with `yy__` by default.
---
C macros can be created as explained below.
---
```yaksha
@native
def getarg(n: int) -> str:
    ccode "yk__sdsdup(global_args[yy__n])"
```
---
If `ccode` is there instead of a pass statement, it compiles to a macro.
---
```c
#define yy__getarg(yy_n) (yk__sdsdup(global_args[yy__n]))
```
---
#### Generic functions
---
!!!<p><span class="red-status">not started</span></p>
---
*Return type can also be a generic if that generic is used in parameters.
*String passed inside `@generic(` should be single upper case characters separated by commas.
;This means it is limited to 26 generics max.
---
```yaksha
@native("yk__arrput")
@generic("T")
def arrput(a: Array[T], v: T) -> bool:
    pass

@native("yk__hmput")
@generic("K,V")
def hmput(a: HashMap[K,V], key: K, value: V) -> bool:
    pass

@native("yk__hmget")
@generic("K,V")
def hmget(a: HashMap[K,V], key: K) -> V:
    pass
```
---
#### GPU/OpenCL device functions
---
!!!<p><span class="red-status">not started</span></p>
---
*Easy access to GPU through OpenCL.
```yaksha
@device
def calculate(n: int) -> int:
   return 1 + 1 
```
---
### Defer statement
---
!!!<p><span class="green-status">done</span></p>
---
*Defer something to happen at the end of the scope.
*Before any `return` from a function.
*Before `break`, `continue` or end of `while` loop body.
**This behaviour is different from what you see in go-lang.
*Before end of `if` body or end of `else` body.
;`defer` works as a stack.
;That means deferred expressions are executed in last deferred first executed order. 
---
```yaksha
def onexit() -> int:
    println("All done")
    return 0

def main() -> int:
    defer onexit()
    println("Hello World")
    return 0
```
---
Output:
```text
Hello World
All done
```
---
### Del statement
---
!!!<p><span class="red-status">not started</span></p>
---
*Delete values.
*Delete arrays, and other builtin data structures without deleting content.
---
```yaksha
def main() -> int:
    a: List[int]
    defer del a
    arrput(a, 1)
    arrput(a, 2)
    arrput(a, 3)
    println(a[0])
    return 0
```
;Compiles to `free`.
---
### Struct/Class statement
---
!!!<p><span class="red-status">not started</span></p>
---
*Create a custom data structure.
*Generic structures are not supported yet.
*Inheritance is not supported yet.
---
```yaksha
class student:
    student_id: int
    name: str
    address: str

struct teacher:
    teacher_id: int
    name: str
    address: str
    
def main() -> int:
    print("Size of student structure is ")
    println(sizeof(student))
    return 0    
```
;`struct` and `class` keywords do the same thing.
;Not finalized. I may just go with `struct` or `class`.
---
#### Exposing native structures
```yaksha
@native("something")
struct something:
    something_id: int
```
;Compiles to
;`#define yy__something something`
---
### Import statement
---
!!!<p><span class="red-status">not started</span></p>
---
*Import a file.
---
```yaksha
import io

def main() -> int:
    file: io.File = io.open("Haha")
    defer io.close(file)
    if file == None:
        println("-- failed to read file --")
        return 1
    data: str = io.readall(file)
    println("-- read file --")
    println(data) 
    return 0
```
;Name mangling takes place for this.
---
## Builtin Functions
---
!!!<p><span class="red-status">not started</span></p>
---
*`print` - A `print` function will be introduced instead of `print` statement.
*`println` - A `print` function that suffix a new line character.
*`len` - Get length of strings and other data structures provided by the language.
*`sizeof` - Size of structures or C data types.
*`iterutf8` - Enumerate utf8 code points of a `str` or `strvw`
*`readfile` - Read a whole file and return a `str`. Empty string is returned if file cannot be read for some reason. This is a convenient function that pretends world is nice and fluffy.
*`writefile` - Save a `str` to a file. `bool` is returned to show success or failure for any reason to write the file.
*`slice` - Create a string view from a string with given start and end positions.
*`tostr` - Converts `strvw` or `int` types to string (base 10). If input is a `str` it is duplicated. `float` types will be formatted with 2 decimal places.
*`ftostr` - Converts a `float` to `str` with given decimal points.
*`itostr` - Converts an `int` to `str` with given base up to 16.
;Built in functions may call different implementations in `C` based on input.
---